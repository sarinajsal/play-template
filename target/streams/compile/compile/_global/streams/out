[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:63:69: adaptation of an empty argument list by inserting () is deprecated: this is unlikely to be what you want[0m
[0m[[0m[33mwarn[0m] [0m[0m        signature: Right.apply[A, B](value: B): scala.util.Right[A,B][0m
[0m[[0m[33mwarn[0m] [0m[0m  given arguments: <none>[0m
[0m[[0m[33mwarn[0m] [0m[0m after adaptation: Right((): Unit)[0m
[0m[[0m[33mwarn[0m] [0m[0m          case x if x.wasAcknowledged().equals(true) => Future(Right())[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                    ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:79:33: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method headOption,[0m
[0m[[0m[33mwarn[0m] [0m[0mor remove the empty argument list from its definition (Java-defined methods are exempt).[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 3, an unapplied method like this will be eta-expanded into a function.[0m
[0m[[0m[33mwarn[0m] [0m[0m      collection.find(byID(id)).headOption flatMap {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:87:37: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method headOption,[0m
[0m[[0m[33mwarn[0m] [0m[0mor remove the empty argument list from its definition (Java-defined methods are exempt).[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 3, an unapplied method like this will be eta-expanded into a function.[0m
[0m[[0m[33mwarn[0m] [0m[0m      collection.find(byName(name)).headOption.flatMap {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                    ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/services/ApplicationService.scala:18:18: imported `ApplicationService` is permanently hidden by definition of class ApplicationService in package services[0m
[0m[[0m[33mwarn[0m] [0m[0mimport services.{ApplicationService, LibraryService}[0m
[0m[[0m[33mwarn[0m] [0m[0m                 ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/services/ApplicationService.scala:27:20: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method index,[0m
[0m[[0m[33mwarn[0m] [0m[0mor remove the empty argument list from its definition (Java-defined methods are exempt).[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 3, an unapplied method like this will be eta-expanded into a function.[0m
[0m[[0m[33mwarn[0m] [0m[0m    dataRepository.index.map {[0m
[0m[[0m[33mwarn[0m] [0m[0m                   ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:63:47: comparing values of types Boolean and Boolean using `equals` unsafely bypasses cooperative equality; use `==` instead[0m
[0m[[0m[33mwarn[0m] [0m[0m          case x if x.wasAcknowledged().equals(true) => Future(Right())[0m
[0m[[0m[33mwarn[0m] [0m[0m                                              ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:99:45: comparing values of types Boolean and Boolean using `equals` unsafely bypasses cooperative equality; use `==` instead[0m
[0m[[0m[33mwarn[0m] [0m[0m        case x if x.wasAcknowledged().equals(true) => Future(Right(()))[0m
[0m[[0m[33mwarn[0m] [0m[0m                                            ^[0m
[0m[[0m[33mwarn[0m] [0m[0m7 warnings found[0m
