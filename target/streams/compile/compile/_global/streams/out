[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:47:68: adaptation of an empty argument list by inserting () is deprecated: this is unlikely to be what you want[0m
[0m[[0m[33mwarn[0m] [0m[0m        signature: Right.apply[A, B](value: B): scala.util.Right[A,B][0m
[0m[[0m[33mwarn[0m] [0m[0m  given arguments: <none>[0m
[0m[[0m[33mwarn[0m] [0m[0m after adaptation: Right((): Unit)[0m
[0m[[0m[33mwarn[0m] [0m[0m        case x if x.wasAcknowledged().equals(true)  => Future(Right())[0m
[0m[[0m[33mwarn[0m] [0m[0m                                                                   ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:62:33: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method headOption,[0m
[0m[[0m[33mwarn[0m] [0m[0mor remove the empty argument list from its definition (Java-defined methods are exempt).[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 3, an unapplied method like this will be eta-expanded into a function.[0m
[0m[[0m[33mwarn[0m] [0m[0m      collection.find(byID(id)).headOption flatMap {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:70:37: Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method headOption,[0m
[0m[[0m[33mwarn[0m] [0m[0mor remove the empty argument list from its definition (Java-defined methods are exempt).[0m
[0m[[0m[33mwarn[0m] [0m[0mIn Scala 3, an unapplied method like this will be eta-expanded into a function.[0m
[0m[[0m[33mwarn[0m] [0m[0m      collection.find(byName(name)).headOption.flatMap {[0m
[0m[[0m[33mwarn[0m] [0m[0m                                    ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:47:45: comparing values of types Boolean and Boolean using `equals` unsafely bypasses cooperative equality; use `==` instead[0m
[0m[[0m[33mwarn[0m] [0m[0m        case x if x.wasAcknowledged().equals(true)  => Future(Right())[0m
[0m[[0m[33mwarn[0m] [0m[0m                                            ^[0m
[0m[[0m[33mwarn[0m] [0m[0m/Users/sarina.salamon/Documents/play-template/app/repositories/DataRepository.scala:82:45: comparing values of types Boolean and Boolean using `equals` unsafely bypasses cooperative equality; use `==` instead[0m
[0m[[0m[33mwarn[0m] [0m[0m        case x if x.wasAcknowledged().equals(true) => Future(Right(()))[0m
[0m[[0m[33mwarn[0m] [0m[0m                                            ^[0m
[0m[[0m[33mwarn[0m] [0m[0m5 warnings found[0m
